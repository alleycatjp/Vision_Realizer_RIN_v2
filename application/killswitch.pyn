"""
Kill-Switch V2  ―  “絶対に止める”安全装置
────────────────────────────────────────────
• 致命的ドローダウン／戦術 RED／Unhandled Exception などで呼び出し
• systemd unit を停止 + tmp/kill フラグ生成 + クリティカルログ
• 最終的に sys.exit(1) でプロセスを確実に終了
"""

import logging
import subprocess
import sys
from pathlib import Path
from typing import Union

UNIT_NAME = "rin-bot.service"          # systemd unit 名
TMP_KILL = Path("tmp/kill")            # 起動ブロック用フラグファイル
DD_THRESHOLD = -0.15                   # ドローダウン閾値（−15 %）

_logger = logging.getLogger(__name__)


class KillSwitch:
    """外部からは activate() だけを叩く"""

    def __init__(self, reason: str) -> None:
        self.reason = reason

    # ───────── 内部処理 ────────────────── #

    def _critical_log(self) -> None:
        _logger.critical("KILL-SWITCH ACTIVATED: %s", self.reason)

    def _touch_flag(self) -> None:
        TMP_KILL.parent.mkdir(parents=True, exist_ok=True)
        TMP_KILL.touch(exist_ok=True)

    def _systemd_stop(self) -> None:
        # systemctl が無い環境でも無害
        subprocess.run(["systemctl", "stop", UNIT_NAME],
                       check=False, capture_output=True)

    # ───────── 入口 ───────────────────── #

    def activate(self) -> None:
        """Bot を即時停止して exit(1)"""
        self._critical_log()
        self._touch_flag()
        self._systemd_stop()
        sys.exit(1)


# ╭─ ユーティリティ関数（既存互換） ───────────────────────────╮ #

def check(dd: float, color: str) -> None:
    """
    ドローダウン dd（-0.15 以下）または market_state color==red で Kill
    """
    if dd <= DD_THRESHOLD or color.lower() == "red":
        print("[KillSwitch] drawdown/RED detected – stopping bot")
        KillSwitch(f"dd={dd:.2%} / color={color}").activate()


def trigger(reason: Union[str, Exception]) -> None:
    """
    例外ハンドラなどからワンライナーで呼び出し
    """
    KillSwitch(str(reason)).activate()
