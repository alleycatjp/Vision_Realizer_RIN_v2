#!/usr/bin/env python3
"""
üìÑ application/strategy_executor.py ‚Äì unified new/old APIÔºàfinalÔºâ
-----------------------------------------------------------------
‚Ä¢ market_state „Å´ÂØæÂøú„Åô„ÇãÊà¶Ë°ì„ÇíÈ†Ü„Å´Âëº„Å≥Âá∫„Åó„ÄÅÊúÄÂàù„Å´ ‚Äúaction‚â†none‚Äù „ÇíËøî„Åó„Åü„ÇÇ„ÅÆ„ÇíÊé°Áî®
‚Ä¢ Êà¶Ë°ì„Ç∑„Ç∞„Éç„ÉÅ„É£Â∑ÆÁï∞ÔºàÊñ∞ API: df, params Ôºè Êóß API: pair, df, paramsÔºâ„ÇíÂê∏Âèé
‚Ä¢ ÂÖ•Âäõ„Åå DataFrameÔºèSeriesÔºèndarrayÔºèlist „ÅÑ„Åö„Çå„Åß„ÇÇ ‚Äúclose‚Äù Âàó„Çí‰øùË®º„Åó„Å¶Ê∏°„Åô
"""
from __future__ import annotations

from typing import Any

import numpy as np
import pandas as pd

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Êà¶Ë°ì„Ç§„É≥„Éù„Éº„ÉàÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†Ôºâ
from domain.strategies.range_rsi import run as rsi
from domain.strategies.trend.macd_strategy import evaluate as macd
from domain.strategies.fallback_breakout import run as fallback_breakout

STRATEGY_TABLE: dict[str, dict[str, Any]] = {
    "range":      {"rsi": rsi},
    "trend":      {"macd": macd},
    "volatility": {"macd": macd},
    "bear":       {"macd": macd},
    "undecided":  {"breakout": fallback_breakout},
}

_DEF_RESULT = {"action": "none", "score": 0.0}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _normalize(res: Any) -> dict:
    """tuple ‚Üí dict ÊèõË£Ö & Ê¨†ÊêçË£úÂÆå"""
    if isinstance(res, tuple):
        act = res[0] if len(res) > 0 else "none"
        score = float(res[1]) if len(res) > 1 else 0.0
        return {"action": act, "score": score}
    return res if isinstance(res, dict) else _DEF_RESULT.copy()


def _to_dataframe(obj) -> pd.DataFrame:
    """Series / ndarray / list ‚Üí DataFrame(close=‚Ä¶) „Å∏Áµ±‰∏Ä"""
    if isinstance(obj, pd.DataFrame):
        df = obj.copy()
    elif isinstance(obj, pd.Series):
        df = pd.DataFrame({"close": obj.values}, index=obj.index)
    else:  # ndarray / list-like
        df = pd.DataFrame({"close": np.asarray(obj, dtype=float)})

    # ÂàóÂêçË™øÊï¥
    if "close" not in df.columns:
        if "last" in df.columns:
            df["close"] = df["last"]
        elif len(df.columns) == 1:
            df.columns = ["close"]

    return df


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def evaluate_strategy(
    pair: str,
    raw,                              # DataFrame / Series / ndarray / list
    market: str,
    params: dict[str, Any] | None = None,
) -> dict:
    params = params or {}

    # ----------- normalize input ‚Üí df with ‚Äúclose‚Äù ----------------
    df = _to_dataframe(raw)
    # ---------------------------------------------------------------

    for name, fn in STRATEGY_TABLE.get(market, {}).items():
        try:
            res = fn(df, params.get(name, {}))          # Êñ∞ API
        except TypeError:
            res = fn(pair, df, params.get(name, {}))    # Êóß API

        res = _normalize(res)
        if res["action"] != "none":
            return {"strategy": name, **res}

    return {"strategy": "none", **_DEF_RESULT.copy()}
